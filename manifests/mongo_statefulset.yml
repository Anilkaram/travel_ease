apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mango-statefulset
spec:
  replicas: 2  # You have 2 replicas
  serviceName: "mongo-headless"  # Required for StatefulSet
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:      
      containers:
      - name: mongo
        image: mongo:5.0
        ports:  
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: password
        - name: MONGO_REPLICA_SET_NAME
          value: "rs0"
        - name: MONGO_ADVERTISED_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - "bash"
        - "-c"
        - |
          set -e
          
          # Set proper permissions for keyfile
          cp /etc/mongo-keyfile /tmp/keyfile
          chmod 400 /tmp/keyfile
          chown mongodb:mongodb /tmp/keyfile
          
          # Only the first pod initializes the replica set
          if [[ "$HOSTNAME" == "mango-statefulset-0" ]]; then
            echo "Primary node - checking if replica set exists..."
            
            # Start MongoDB temporarily without auth for setup
            mongod --replSet rs0 --bind_ip_all --keyFile /tmp/keyfile --dbpath /data/db &
            MONGO_PID=$!
            
            # Wait for MongoDB to start
            until mongosh --eval "db.runCommand('ping').ok" --quiet; do
              echo "Waiting for MongoDB to start..."
              sleep 2
            done
            
            # Check if replica set is initialized
            if ! mongosh --eval "rs.status()" --quiet 2>/dev/null; then
              echo "Initializing replica set..."
              mongosh --eval "
                rs.initiate({
                  _id: 'rs0',
                  members: [{ _id: 0, host: 'mango-statefulset-0.mongo-headless:27017' }]
                })
              "
              
              # Wait for this node to become primary
              until mongosh --eval "db.isMaster().ismaster" --quiet | grep -q true; do
                echo "Waiting to become primary..."
                sleep 2
              done
              
              echo "Creating admin user..."
              mongosh --eval "
                db.getSiblingDB('admin').createUser({
                  user: '$MONGO_INITDB_ROOT_USERNAME',
                  pwd: '$MONGO_INITDB_ROOT_PASSWORD',
                  roles: [{role: 'root', db: 'admin'}]
                })
              "
              
              echo "Replica set initialized successfully!"
            else
              echo "Replica set already exists."
            fi
            
            # Stop and restart with auth
            kill $MONGO_PID
            wait $MONGO_PID || true
          fi
          
          # Start MongoDB with authentication
          echo "Starting MongoDB with authentication..."
          exec mongod \
            --replSet rs0 \
            --bind_ip_all \
            --auth \
            --keyFile /tmp/keyfile \
            --dbpath /data/db
        volumeMounts:
        - name: mongo-storage
          mountPath: /data/db
        - name: mongo-keyfile
          mountPath: /etc/mongo-keyfile
          subPath: keyfile
          readOnly: true
        resources:
          requests:
            cpu: 250m
            memory: 500Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          tcpSocket:
            port: 27017
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          tcpSocket:
            port: 27017
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: mongo-keyfile
        secret:
          secretName: mongo-keyfile
          defaultMode: 0400
  volumeClaimTemplates:
  - metadata:
      name: mongo-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      # storageClassName: "gp3"  # Use default StorageClass
      resources:
        requests:
          storage: 2Gi  # Increased for production

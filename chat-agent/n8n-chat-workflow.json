{
  "name": "TravelEase Chat Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "b5d77e5a-1234-4567-8901-webhook000001",
      "name": "Chat Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "chat-webhook-001"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "tour"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains", 
              "value2": "destination"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "price"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "b5d77e5a-1234-4567-8901-condition001",
      "name": "Message Intent Detection",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "find",
        "collection": "tours",
        "options": {}
      },
      "id": "b5d77e5a-1234-4567-8901-mongodb001",
      "name": "Query Tours",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [680, 200],
      "credentials": {
        "mongoDb": {
          "id": "mongodb_credentials",
          "name": "TravelEase MongoDB"
        }
      }
    },
    {
      "parameters": {
        "operation": "find",
        "collection": "destinations",
        "options": {}
      },
      "id": "b5d77e5a-1234-4567-8901-mongodb002", 
      "name": "Query Destinations",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [680, 400],
      "credentials": {
        "mongoDb": {
          "id": "mongodb_credentials",
          "name": "TravelEase MongoDB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced TravelEase Chat Agent Response Generator\nconst inputData = $input.first().json;\nconst message = (inputData.message || '').toLowerCase();\n\n// Get data from MongoDB queries\nlet tours = [];\nlet destinations = [];\n\ntry {\n  tours = $('Query Tours').all().map(item => item.json) || [];\n} catch (e) {\n  console.log('No tours data available');\n}\n\ntry {\n  destinations = $('Query Destinations').all().map(item => item.json) || [];\n} catch (e) {\n  console.log('No destinations data available');\n}\n\n// Intent detection patterns\nconst intents = {\n  tours: ['tour', 'trip', 'package', 'vacation', 'travel'],\n  destinations: ['destination', 'place', 'location', 'country', 'city'],\n  pricing: ['price', 'cost', 'budget', 'cheap', 'expensive', 'affordable'],\n  featured: ['popular', 'featured', 'recommended', 'best', 'top']\n};\n\n// Detect user intent\nfunction detectIntent(msg) {\n  const detectedIntents = [];\n  for (const [intent, keywords] of Object.entries(intents)) {\n    if (keywords.some(keyword => msg.includes(keyword))) {\n      detectedIntents.push(intent);\n    }\n  }\n  return detectedIntents.length > 0 ? detectedIntents : ['general'];\n}\n\n// Extract price range from message\nfunction extractPriceRange(msg) {\n  const priceMatch = msg.match(/\\$?(\\d+)\\s*-\\s*\\$?(\\d+)|under\\s*\\$?(\\d+)|below\\s*\\$?(\\d+)/i);\n  if (priceMatch) {\n    if (priceMatch[1] && priceMatch[2]) {\n      return { min: parseInt(priceMatch[1]), max: parseInt(priceMatch[2]) };\n    } else if (priceMatch[3] || priceMatch[4]) {\n      return { max: parseInt(priceMatch[3] || priceMatch[4]) };\n    }\n  }\n  return null;\n}\n\n// Generate response based on intent\nfunction generateResponse(intents, data) {\n  let response = '';\n  \n  if (intents.includes('tours') || intents.includes('featured')) {\n    if (data.tours.length > 0) {\n      const featuredTours = data.tours.filter(tour => tour.isFeatured || tour.featured);\n      const toursToShow = featuredTours.length > 0 ? featuredTours.slice(0, 3) : data.tours.slice(0, 3);\n      \n      response += `🌟 Here are ${featuredTours.length > 0 ? 'our featured' : 'some amazing'} tours:\\n\\n`;\n      \n      toursToShow.forEach((tour, index) => {\n        response += `${index + 1}. **${tour.title || tour.name}**\\n`;\n        response += `   📍 ${tour.location}\\n`;\n        response += `   ⏱️ ${tour.duration}\\n`;\n        response += `   💰 $${tour.price?.toLocaleString() || 'Contact for pricing'}\\n`;\n        if (tour.description) {\n          response += `   📝 ${tour.description.substring(0, 100)}...\\n`;\n        }\n        if (tour.isFeatured || tour.featured) {\n          response += `   ⭐ Featured Tour!\\n`;\n        }\n        response += `\\n`;\n      });\n      \n      if (data.tours.length > 3) {\n        response += `📋 And ${data.tours.length - 3} more tours available!\\n`;\n      }\n    } else {\n      response += \"😔 No tours found. Please contact our travel experts for personalized recommendations!\\n\";\n    }\n  }\n  \n  else if (intents.includes('destinations')) {\n    if (data.destinations.length > 0) {\n      response += `🗺️ Here are our popular destinations:\\n\\n`;\n      \n      data.destinations.slice(0, 5).forEach((dest, index) => {\n        response += `${index + 1}. **${dest.name || dest.title}**\\n`;\n        response += `   📍 ${dest.location}\\n`;\n        if (dest.description) {\n          response += `   📝 ${dest.description.substring(0, 80)}...\\n`;\n        }\n        response += `\\n`;\n      });\n    } else {\n      response += \"🗺️ No destinations found. Contact us for custom destination planning!\\n\";\n    }\n  }\n  \n  else if (intents.includes('pricing')) {\n    if (data.tours.length > 0) {\n      const sortedTours = data.tours.sort((a, b) => (a.price || 0) - (b.price || 0));\n      const budget = sortedTours.filter(t => t.price && t.price < 1000);\n      const mid = sortedTours.filter(t => t.price && t.price >= 1000 && t.price < 2500);\n      const luxury = sortedTours.filter(t => t.price && t.price >= 2500);\n      \n      response += `💰 **Tour Pricing Overview:**\\n\\n`;\n      \n      if (budget.length > 0) {\n        response += `🏷️ **Budget Tours (Under $1,000):** ${budget.length} options\\n`;\n        response += `   Starting from $${Math.min(...budget.map(t => t.price))}\\n\\n`;\n      }\n      \n      if (mid.length > 0) {\n        response += `🎯 **Mid-Range Tours ($1,000-$2,500):** ${mid.length} options\\n`;\n        const avgPrice = Math.round(mid.reduce((sum, t) => sum + t.price, 0) / mid.length);\n        response += `   Average price: $${avgPrice.toLocaleString()}\\n\\n`;\n      }\n      \n      if (luxury.length > 0) {\n        response += `💎 **Luxury Tours ($2,500+):** ${luxury.length} options\\n`;\n        response += `   Premium experiences from $${Math.min(...luxury.map(t => t.price)).toLocaleString()}\\n\\n`;\n      }\n      \n      response += `**� Best Value Tours:**\\n`;\n      sortedTours.slice(0, 3).forEach((tour, i) => {\n        response += `${i + 1}. ${tour.title || tour.name} - $${tour.price?.toLocaleString() || 'TBD'} (${tour.duration || 'Contact us'})\\n`;\n      });\n    }\n  }\n  \n  else {\n    response += `👋 Welcome to TravelEase! I'm your AI travel assistant.\\n\\n`;\n    response += `I can help you with:\\n`;\n    response += `• 🎒 Tours and travel packages\\n`;\n    response += `• 🗺️ Destination information\\n`;\n    response += `• 💰 Pricing and budget planning\\n`;\n    response += `• ⭐ Featured and popular tours\\n\\n`;\n    response += `Try asking:\\n`;\n    response += `• \"Show me featured tours\"\\n`;\n    response += `• \"What destinations do you offer?\"\\n`;\n    response += `• \"Tours under $2000\"\\n`;\n    response += `• \"Popular destinations in Europe\"`;\n  }\n  \n  return response;\n}\n\n// Main processing\nconst userIntents = detectIntent(message);\nconst priceRange = extractPriceRange(message);\n\n// Filter tours by price if specified\nlet filteredTours = tours;\nif (priceRange && tours.length > 0) {\n  filteredTours = tours.filter(tour => {\n    if (!tour.price) return true;\n    if (priceRange.min && priceRange.max) {\n      return tour.price >= priceRange.min && tour.price <= priceRange.max;\n    } else if (priceRange.max) {\n      return tour.price <= priceRange.max;\n    }\n    return true;\n  });\n}\n\nconst responseText = generateResponse(userIntents, {\n  tours: filteredTours,\n  destinations: destinations\n});\n\nreturn {\n  response: responseText,\n  intent: userIntents,\n  message_received: inputData.message,\n  timestamp: new Date().toISOString(),\n  query_results: {\n    tours_found: tours.length,\n    destinations_found: destinations.length,\n    filtered_tours: filteredTours.length\n  },\n  status: 'success'\n};"
      },
      "id": "b5d77e5a-1234-4567-8901-code000001",
      "name": "Generate AI Response", 
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "b5d77e5a-1234-4567-8901-response01",
      "name": "Send Response",
      "type": "n8n-nodes-base.webhookResponse",
      "typeVersion": 1,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Chat Webhook": {
      "main": [
        [
          {
            "node": "Message Intent Detection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Intent Detection": {
      "main": [
        [
          {
            "node": "Query Tours",
            "type": "main",
            "index": 0
          },
          {
            "node": "Query Destinations", 
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Tours": {
      "main": [
        [
          {
            "node": "Generate AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Destinations": {
      "main": [
        [
          {
            "node": "Generate AI Response",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-05T00:00:00.000Z",
  "versionId": "2"
}
